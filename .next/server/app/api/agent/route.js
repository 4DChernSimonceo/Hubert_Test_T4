/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/agent/route";
exports.ids = ["app/api/agent/route"];
exports.modules = {

/***/ "(rsc)/./app/api/agent/route.ts":
/*!********************************!*\
  !*** ./app/api/agent/route.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DELETE: () => (/* binding */ DELETE),\n/* harmony export */   GET: () => (/* binding */ GET),\n/* harmony export */   POST: () => (/* binding */ POST),\n/* harmony export */   PUT: () => (/* binding */ PUT)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/.pnpm/next@15.5.3_react-dom@19.1.1_react@19.1.1__react@19.1.1/node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_agents_weatherAgent__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/agents/weatherAgent */ \"(rsc)/./lib/agents/weatherAgent.ts\");\n/* harmony import */ var _lib_agents_currentEventsAgent__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/agents/currentEventsAgent */ \"(rsc)/./lib/agents/currentEventsAgent.ts\");\n/* harmony import */ var _lib_agents_historicEventsAgent__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/lib/agents/historicEventsAgent */ \"(rsc)/./lib/agents/historicEventsAgent.ts\");\n/* harmony import */ var _lib_agents_organizerScoringAgent__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/lib/agents/organizerScoringAgent */ \"(rsc)/./lib/agents/organizerScoringAgent.ts\");\n/* harmony import */ var _lib_supabaseClient__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @/lib/supabaseClient */ \"(rsc)/./lib/supabaseClient.ts\");\n\n\n\n\n\n\n/**\r\n * API Route Handler for Agent Operations\r\n * Handles POST requests to execute different AI agents\r\n */ async function POST(request) {\n    try {\n        const body = await request.json();\n        const { agent, payload, eventId, userId } = body;\n        if (!agent || !payload) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'Missing required fields: agent and payload'\n            }, {\n                status: 400\n            });\n        }\n        // Validate agent type\n        const validAgents = [\n            'weather',\n            'currentEvents',\n            'historicEvents',\n            'organizerScoring'\n        ];\n        if (!validAgents.includes(agent)) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: `Invalid agent type. Must be one of: ${validAgents.join(', ')}`\n            }, {\n                status: 400\n            });\n        }\n        let result;\n        // Route to appropriate agent\n        switch(agent){\n            case 'weather':\n                result = await (0,_lib_agents_weatherAgent__WEBPACK_IMPORTED_MODULE_1__.run)(payload);\n                break;\n            case 'currentEvents':\n                result = await (0,_lib_agents_currentEventsAgent__WEBPACK_IMPORTED_MODULE_2__.run)(payload);\n                break;\n            case 'historicEvents':\n                result = await (0,_lib_agents_historicEventsAgent__WEBPACK_IMPORTED_MODULE_3__.run)(payload);\n                break;\n            case 'organizerScoring':\n                result = await (0,_lib_agents_organizerScoringAgent__WEBPACK_IMPORTED_MODULE_4__.run)(payload);\n                break;\n            default:\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    error: 'Unknown agent type'\n                }, {\n                    status: 400\n                });\n        }\n        // Store result in database if eventId and userId are provided\n        if (eventId && userId) {\n            try {\n                const { error } = await _lib_supabaseClient__WEBPACK_IMPORTED_MODULE_5__.supabaseAdmin.from('agent_results').insert({\n                    event_id: eventId,\n                    agent_name: agent,\n                    response_text: result,\n                    user_id: userId\n                });\n                if (error) {\n                    console.error('Database insert error:', error);\n                // Don't fail the request if database insert fails\n                }\n            } catch (dbError) {\n                console.error('Database operation error:', dbError);\n            // Don't fail the request if database operation fails\n            }\n        }\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: true,\n            agent,\n            result,\n            timestamp: new Date().toISOString()\n        });\n    } catch (error) {\n        console.error('Agent API error:', error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: 'Internal server error',\n            message: error instanceof Error ? error.message : 'Unknown error',\n            timestamp: new Date().toISOString()\n        }, {\n            status: 500\n        });\n    }\n}\n/**\r\n * Handle unsupported HTTP methods\r\n */ async function GET() {\n    return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n        error: 'Method not allowed. Use POST to execute agents.'\n    }, {\n        status: 405\n    });\n}\nasync function PUT() {\n    return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n        error: 'Method not allowed. Use POST to execute agents.'\n    }, {\n        status: 405\n    });\n}\nasync function DELETE() {\n    return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n        error: 'Method not allowed. Use POST to execute agents.'\n    }, {\n        status: 405\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/api/agent/route.ts\n");

/***/ }),

/***/ "(rsc)/./lib/agents/currentEventsAgent.ts":
/*!******************************************!*\
  !*** ./lib/agents/currentEventsAgent.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   run: () => (/* binding */ run)\n/* harmony export */ });\n/**\r\n * Current Events Agent - Analyzes events within the last 72 hours that could impact the upcoming event\r\n * @param payload - Contains location, date, and event details\r\n * @returns Analysis of recent events that could affect the planned event\r\n */ async function run(payload) {\n    const { location, date, eventType, expectedAttendance } = payload;\n    if (!location || !date) {\n        throw new Error('Location and date are required for current events analysis');\n    }\n    const geminiApiKey = \"AIzaSyA8iqM-6wibaLrqTB42bO_IVhtZXKAzWCg\";\n    if (!geminiApiKey) {\n        throw new Error('GEMINI_API_KEY not configured for Current Events Agent');\n    }\n    try {\n        // Use Gemini to search for and analyze recent events in one go\n        const currentDate = new Date();\n        const startDate = new Date(Date.now() - 72 * 60 * 60 * 1000) // 72 hours ago\n        ;\n        const prompt = `You are a comprehensive current events analyst with access to real-time information. Search for and analyze ANY significant events that have occurred in ${location} within the last 72 hours (from ${startDate.toISOString()} to ${currentDate.toISOString()}) that could impact an upcoming ${eventType} event on ${date}.\n\nSEARCH AND ANALYZE:\n- Traffic incidents, road closures, construction delays\n- Weather emergencies, severe weather warnings, storms\n- Local emergencies, accidents, public safety incidents\n- Major events, festivals, concerts, protests, gatherings\n- Infrastructure issues (power outages, water main breaks, gas leaks)\n- Transportation disruptions (airport delays, train cancellations, transit issues)\n- Public health alerts, disease outbreaks, advisories\n- Government announcements, policy changes affecting the area\n- Sports events, entertainment venues with large crowds\n- Breaking news that could affect local conditions\n\nEVENT DETAILS:\nType: ${eventType}\nLocation: ${location}\nDate: ${date}\nExpected Attendance: ${expectedAttendance || 'Not specified'}\n\nOUTPUT FORMAT - Provide a comprehensive report exactly like this:\n\n📰 CURRENT EVENTS ANALYSIS REPORT\n\n📍 Location: ${location}\n📅 Event Date: ${date}\n🎪 Event Type: ${eventType}\n\n⏰ MONITORING WINDOW: Last 72 Hours\n\n🔍 RECENT EVENTS ANALYSIS:\n[If events found: List each significant event with timestamp, description, and potential impact]\n[If no events: • No significant events detected in the last 72 hours that could impact your upcoming event]\n\n📊 IMPACT ASSESSMENT:\n• Overall Impact Level: [None/Minimal/Low/Medium/High]\n• Risk Level: [None/Low/Medium/High/Critical]\n• Event Viability: [Unaffected/Minor Concerns/Moderate Impact/Major Impact/Critical Impact]\n\n[IF EVENTS FOUND, INCLUDE:]\n🚨 CRITICAL FINDINGS:\n[List any events that pose immediate risks or require urgent action]\n\n✅ POSITIVE DEVELOPMENTS:\n[List any events that could benefit the planned event or improve conditions]\n\n⚠️ POTENTIAL CONCERNS:\n[List events that require monitoring, could cause minor issues, or need contingency planning]\n\n[IF NO EVENTS FOUND, INCLUDE:]\n✅ KEY FINDINGS:\n1. No traffic disruptions or road closures reported\n2. No major local incidents or emergencies\n3. No competing events scheduled for the same timeframe\n4. Normal public service operations expected\n5. Weather conditions appear stable\n\n🎯 SPECIFIC RECOMMENDATIONS:\n[Provide 3-5 actionable recommendations based on your findings - either mitigation strategies for found events OR standard preparation steps if no events found]\n\n📈 CONFIDENCE LEVEL: [High/Medium/Low]\n[Brief explanation: \"Based on comprehensive monitoring of news sources, emergency services, traffic systems, and local announcements\" OR \"Limited data availability requires manual verification\"]\n\n🔄 MONITORING STATUS:\n• Continuous monitoring active\n• Will alert if new developments arise\n• Next update scheduled closer to event date\n\n---\nGenerated: ${currentDate.toISOString()}\nAnalysis Window: 72 hours prior to report generation\nEvent: ${eventType} in ${location} on ${date}\n\nINSTRUCTIONS:\n- Only include REAL, VERIFIED events that have actually occurred\n- Focus on events that could realistically impact the planned event\n- If you find significant events, provide detailed impact analysis\n- If you find no significant events, clearly state the area is clear for event planning\n- Be specific about locations, times, and expected duration of any impacts\n- Provide actionable recommendations in all cases`;\n        // Call Gemini API for comprehensive analysis\n        const response = await fetchWithRetry(`https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-exp:generateContent?key=${geminiApiKey}`, 3, 30000, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                contents: [\n                    {\n                        parts: [\n                            {\n                                text: prompt\n                            }\n                        ]\n                    }\n                ],\n                generationConfig: {\n                    temperature: 0.2,\n                    topK: 40,\n                    topP: 0.95,\n                    maxOutputTokens: 4096\n                },\n                safetySettings: [\n                    {\n                        category: \"HARM_CATEGORY_HARASSMENT\",\n                        threshold: \"BLOCK_NONE\"\n                    },\n                    {\n                        category: \"HARM_CATEGORY_HATE_SPEECH\",\n                        threshold: \"BLOCK_NONE\"\n                    },\n                    {\n                        category: \"HARM_CATEGORY_SEXUALLY_EXPLICIT\",\n                        threshold: \"BLOCK_NONE\"\n                    },\n                    {\n                        category: \"HARM_CATEGORY_DANGEROUS_CONTENT\",\n                        threshold: \"BLOCK_NONE\"\n                    }\n                ]\n            })\n        });\n        if (!response.ok) {\n            const errorText = await response.text().catch(()=>'Unable to read error response');\n            console.error('Gemini API Error:', response.status, errorText);\n            return generateFallbackAnalysis(payload);\n        }\n        const data = await response.json();\n        const rawAnalysis = data.candidates?.[0]?.content?.parts?.[0]?.text;\n        if (!rawAnalysis || rawAnalysis.trim().length === 0) {\n            console.error('Empty analysis from Gemini');\n            return generateFallbackAnalysis(payload);\n        }\n        return rawAnalysis;\n    } catch (error) {\n        console.error('Current events agent error:', error);\n        return generateFallbackAnalysis(payload);\n    }\n}\n/**\r\n * Generate fallback analysis when Gemini fails\r\n */ function generateFallbackAnalysis(payload) {\n    const { location, date, eventType } = payload;\n    return `📰 CURRENT EVENTS ANALYSIS REPORT\n\n📍 Location: ${location}\n📅 Event Date: ${date}\n🎪 Event Type: ${eventType}\n\n⏰ MONITORING WINDOW: Last 72 Hours\n\n🔍 RECENT EVENTS ANALYSIS:\n• Analysis system temporarily unavailable - using fallback monitoring\n• Standard monitoring protocols engaged\n• Manual verification recommended for critical events\n\n📊 IMPACT ASSESSMENT:\n• Overall Impact Level: Unknown (System Unavailable)\n• Risk Level: Medium (Precautionary)\n• Event Viability: Requires Manual Verification\n\n⚠️ FALLBACK RECOMMENDATIONS:\n• Contact local authorities for recent incident reports\n• Check local news sources manually\n• Verify traffic conditions via local traffic apps\n• Confirm venue accessibility with venue management\n• Monitor social media for local disruptions\n• Check weather services for any alerts\n\n🎯 IMMEDIATE ACTIONS:\n1. Manual verification of local conditions strongly recommended\n2. Contact venue directly for any reported issues\n3. Check with local emergency services for recent incidents\n4. Verify public transportation status\n5. Review local government websites for announcements\n\n📈 CONFIDENCE LEVEL: Low\n(Due to analysis system limitations - manual verification required)\n\n🔄 MONITORING STATUS:\n• Attempting to restore analysis capabilities\n• Manual verification strongly recommended\n• Contact technical support if issues persist\n\n---\nGenerated: ${new Date().toISOString()}\nAnalysis Window: 72 hours prior to report generation\nEvent: ${eventType} in ${location} on ${date}`;\n}\n/**\r\n * Utility function for retry logic\r\n */ async function fetchWithRetry(url, maxRetries, timeout, options) {\n    let lastError = null;\n    for(let attempt = 1; attempt <= maxRetries; attempt++){\n        try {\n            const controller = new AbortController();\n            const timeoutId = setTimeout(()=>controller.abort(), timeout);\n            const response = await fetch(url, {\n                ...options,\n                signal: controller.signal\n            });\n            clearTimeout(timeoutId);\n            if (response.ok) {\n                return response;\n            } else if (response.status >= 500 || response.status === 429) {\n                // Server errors or rate limits - retry\n                lastError = new Error(`HTTP ${response.status}: ${response.statusText}`);\n            } else {\n                // Client errors - return for handling\n                return response;\n            }\n        } catch (error) {\n            lastError = error instanceof Error ? error : new Error('Unknown fetch error');\n            if (attempt === maxRetries) {\n                break;\n            }\n            // Exponential backoff\n            const delay = Math.pow(2, attempt) * 1000;\n            await new Promise((resolve)=>setTimeout(resolve, delay));\n        }\n    }\n    throw lastError || new Error('Max retries exceeded');\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/agents/currentEventsAgent.ts\n");

/***/ }),

/***/ "(rsc)/./lib/agents/historicEventsAgent.ts":
/*!*******************************************!*\
  !*** ./lib/agents/historicEventsAgent.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   run: () => (/* binding */ run)\n/* harmony export */ });\n/**\r\n * Historic Events Agent - Analyzes historical event data and patterns\r\n * @param payload - Contains event details and historical data\r\n * @returns Historical analysis and pattern recognition\r\n */ async function run(payload) {\n    // Temporarily disabled - not doing anything for now\n    return \"Historical analysis is currently disabled.\";\n}\n/**\r\n * Fetch historical event data from various sources\r\n */ async function fetchHistoricalData(eventType, location) {\n    // This would integrate with historical event databases, CSV files, etc.\n    // For now, return empty array as we don't have real historical data sources\n    // In a production system, this would query actual event databases, APIs, or data warehouses\n    console.log(`Fetching historical data for ${eventType} in ${location} - no data sources configured`);\n    return [];\n}\n/**\r\n * Analyze historical data using LLM\r\n */ async function analyzeWithLLM(historicalData, eventDetails) {\n    const geminiApiKey = \"AIzaSyA8iqM-6wibaLrqTB42bO_IVhtZXKAzWCg\";\n    if (!geminiApiKey) {\n        throw new Error('GEMINI_API_KEY not configured for Historic Events Agent');\n    }\n    try {\n        const prompt = `\nAnalyze the following historical event data and provide insights for a new event:\n\nHistorical Data:\n${JSON.stringify(historicalData, null, 2)}\n\nNew Event Details:\n${JSON.stringify(eventDetails, null, 2)}\n\nPlease provide:\n1. Attendance prediction based on historical patterns\n2. Key success factors identified\n3. Risk factors to consider\n4. Budget recommendations\n5. Optimal timing insights\n6. Weather impact analysis\n\nFormat your response as a structured analysis with clear sections.\n`;\n        const response = await fetchWithRetry(`https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent?key=${geminiApiKey}`, 3, 10000, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                contents: [\n                    {\n                        parts: [\n                            {\n                                text: prompt\n                            }\n                        ]\n                    }\n                ],\n                generationConfig: {\n                    temperature: 0.7,\n                    topK: 40,\n                    topP: 0.95,\n                    maxOutputTokens: 1024\n                }\n            })\n        });\n        if (!response.ok) {\n            throw new Error(`LLM API error: ${response.status}`);\n        }\n        const data = await response.json();\n        const analysis = data.candidates?.[0]?.content?.parts?.[0]?.text;\n        if (!analysis) {\n            throw new Error('No analysis generated from LLM');\n        }\n        return analysis;\n    } catch (error) {\n        console.error('LLM analysis error:', error);\n        throw new Error(`Unable to analyze historical data: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n}\n/**\r\n * Fetch with retry logic and timeout\r\n */ async function fetchWithRetry(url, maxRetries, timeout, options) {\n    for(let attempt = 1; attempt <= maxRetries; attempt++){\n        try {\n            const controller = new AbortController();\n            const timeoutId = setTimeout(()=>controller.abort(), timeout);\n            const response = await fetch(url, {\n                ...options,\n                signal: controller.signal\n            });\n            clearTimeout(timeoutId);\n            return response;\n        } catch (error) {\n            if (attempt === maxRetries) {\n                throw error;\n            }\n            // Wait before retry (exponential backoff)\n            await new Promise((resolve)=>setTimeout(resolve, Math.pow(2, attempt) * 1000));\n        }\n    }\n    throw new Error('Max retries exceeded');\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/agents/historicEventsAgent.ts\n");

/***/ }),

/***/ "(rsc)/./lib/agents/organizerScoringAgent.ts":
/*!*********************************************!*\
  !*** ./lib/agents/organizerScoringAgent.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   run: () => (/* binding */ run)\n/* harmony export */ });\n/**\r\n * Organizer Scoring Agent - Aggregates all agent outputs and computes readiness score\r\n * @param payload - Contains all agent results and event details\r\n * @returns Comprehensive readiness score and recommendations\r\n */ async function run(payload) {\n    const { weatherAnalysis, currentEventsAnalysis, historicAnalysis, eventDetails } = payload;\n    if (!eventDetails) {\n        throw new Error('Event details are required for scoring');\n    }\n    try {\n        // Aggregate all analyses\n        const aggregatedData = {\n            weather: weatherAnalysis || 'No weather data available',\n            currentEvents: currentEventsAnalysis || 'No current events data available',\n            historical: historicAnalysis || 'No historical data available',\n            eventDetails\n        };\n        // Compute readiness score using LLM\n        const scoreAnalysis = await computeReadinessScore(aggregatedData);\n        return scoreAnalysis;\n    } catch (error) {\n        console.error('Organizer scoring agent error:', error);\n        // Return a more user-friendly error response instead of throwing\n        return generateFallbackAnalysis(eventDetails, error instanceof Error ? error.message : 'Unknown error');\n    }\n}\n/**\r\n * Compute readiness score using LLM analysis with comprehensive error handling\r\n */ async function computeReadinessScore(data) {\n    const geminiApiKey = \"AIzaSyA8iqM-6wibaLrqTB42bO_IVhtZXKAzWCg\";\n    if (!geminiApiKey) {\n        throw new Error('GEMINI_API_KEY not configured for Organizer Scoring Agent');\n    }\n    // Validate input data\n    if (!data || typeof data !== 'object') {\n        throw new Error('Invalid input data provided to scoring function');\n    }\n    try {\n        const prompt = buildOptimizedPrompt(data);\n        // Log request details for debugging\n        console.log('LLM Request Details:', {\n            promptLength: prompt.length,\n            eventType: data.eventDetails?.eventType,\n            location: data.eventDetails?.location,\n            timestamp: new Date().toISOString()\n        });\n        const response = await fetchWithRetry(`https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-exp:generateContent?key=${geminiApiKey}`, 3, 20000, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                contents: [\n                    {\n                        parts: [\n                            {\n                                text: prompt\n                            }\n                        ]\n                    }\n                ],\n                generationConfig: {\n                    temperature: 0.3,\n                    topK: 40,\n                    topP: 0.95,\n                    maxOutputTokens: 4096,\n                    stopSequences: []\n                },\n                safetySettings: [\n                    {\n                        category: \"HARM_CATEGORY_HARASSMENT\",\n                        threshold: \"BLOCK_NONE\"\n                    },\n                    {\n                        category: \"HARM_CATEGORY_HATE_SPEECH\",\n                        threshold: \"BLOCK_NONE\"\n                    },\n                    {\n                        category: \"HARM_CATEGORY_SEXUALLY_EXPLICIT\",\n                        threshold: \"BLOCK_NONE\"\n                    },\n                    {\n                        category: \"HARM_CATEGORY_DANGEROUS_CONTENT\",\n                        threshold: \"BLOCK_NONE\"\n                    }\n                ]\n            })\n        });\n        // Enhanced response validation\n        console.log('LLM Response Status:', response.status);\n        console.log('LLM Response Headers:', Object.fromEntries(response.headers.entries()));\n        if (!response.ok) {\n            const errorText = await response.text().catch(()=>'Unable to read error response');\n            console.error('LLM API Error Details:', {\n                status: response.status,\n                statusText: response.statusText,\n                errorBody: errorText\n            });\n            throw new Error(`LLM API error: ${response.status} - ${response.statusText}. Body: ${errorText}`);\n        }\n        const responseData = await response.json();\n        console.log('LLM Response Structure:', {\n            hasCandidates: !!responseData.candidates,\n            candidatesLength: responseData.candidates?.length,\n            hasContent: !!responseData.candidates?.[0]?.content,\n            hasParts: !!responseData.candidates?.[0]?.content?.parts,\n            partsLength: responseData.candidates?.[0]?.content?.parts?.length\n        });\n        // More robust response extraction\n        const rawAnalysis = extractAnalysisFromResponse(responseData);\n        if (!rawAnalysis || rawAnalysis.trim().length === 0) {\n            console.error('Empty analysis from LLM. Full response:', JSON.stringify(responseData, null, 2));\n            throw new Error('No analysis generated from LLM - empty response content');\n        }\n        console.log('Raw Analysis Length:', rawAnalysis.length);\n        console.log('Raw Analysis Preview:', rawAnalysis.substring(0, 200) + '...');\n        // Try to parse the structured JSON response\n        try {\n            const structuredData = parseStructuredResponse(rawAnalysis);\n            return formatStructuredAnalysis(structuredData, data.eventDetails);\n        } catch (parseError) {\n            console.error('Error parsing structured response:', parseError);\n            console.error('Raw response for debugging:', rawAnalysis);\n            // Enhanced fallback - try to extract partial data\n            const partialData = extractPartialData(rawAnalysis);\n            if (partialData) {\n                return formatStructuredAnalysis(partialData, data.eventDetails);\n            }\n            // Final fallback to raw analysis with formatting\n            return formatRawAnalysis(rawAnalysis, data.eventDetails);\n        }\n    } catch (error) {\n        console.error('LLM scoring error:', error);\n        // Check for specific error types and provide better error messages\n        if (error instanceof Error) {\n            if (error.message.includes('fetch')) {\n                throw new Error(`Network error connecting to LLM service: ${error.message}`);\n            } else if (error.message.includes('timeout') || error.message.includes('aborted')) {\n                throw new Error(`LLM request timed out. The analysis may be too complex.`);\n            } else if (error.message.includes('401') || error.message.includes('403')) {\n                throw new Error(`Authentication error with LLM service. Check API key configuration.`);\n            } else if (error.message.includes('429')) {\n                throw new Error(`Rate limit exceeded for LLM service. Please try again later.`);\n            }\n        }\n        throw new Error(`Unable to compute readiness score: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n}\n/**\r\n * Build an optimized prompt with better structure and constraints\r\n */ function buildOptimizedPrompt(data) {\n    return `You are a senior event planning strategist analyzing event readiness. Provide a comprehensive assessment in STRICT JSON format.\n\nEVENT DATA:\nEvent Type: ${data.eventDetails?.eventType || 'Not specified'}\nLocation: ${data.eventDetails?.location || 'Not specified'}\nDate: ${data.eventDetails?.date || 'Not specified'}\nBudget: ${data.eventDetails?.budget || 'Not specified'}\nExpected Attendance: ${data.eventDetails?.expectedAttendance || 'Not specified'}\n\nWEATHER ANALYSIS:\n${data.weather}\n\nCURRENT EVENTS:\n${data.currentEvents}\n\nHISTORICAL DATA:\n${data.historical}\n\nRESPOND WITH ONLY THIS JSON STRUCTURE (no additional text):\n\n{\n  \"overallScore\": {\n    \"total\": 85,\n    \"breakdown\": {\n      \"weather\": 90,\n      \"competition\": 75,\n      \"historical\": 80,\n      \"budget\": 85,\n      \"logistics\": 90\n    }\n  },\n  \"criticalIssues\": [\n    \"Issue 1 description\",\n    \"Issue 2 description\"\n  ],\n  \"strengths\": [\n    \"Strength 1 description\",\n    \"Strength 2 description\"\n  ],\n  \"opportunities\": [\n    \"Opportunity 1 description\",\n    \"Opportunity 2 description\"\n  ],\n  \"recommendations\": [\n    {\n      \"category\": \"Weather\",\n      \"priority\": \"High\",\n      \"action\": \"Specific action\",\n      \"timeline\": \"When to implement\",\n      \"impact\": \"Expected impact\"\n    }\n  ],\n  \"riskAssessment\": [\n    {\n      \"risk\": \"Risk description\",\n      \"probability\": \"High\",\n      \"impact\": \"Medium\",\n      \"mitigation\": \"Mitigation strategy\"\n    }\n  ],\n  \"successProbability\": {\n    \"percentage\": 85,\n    \"confidence\": \"High\",\n    \"factors\": [\"Factor 1\", \"Factor 2\"]\n  },\n  \"nextSteps\": [\n    \"Step 1\",\n    \"Step 2\"\n  ],\n  \"summary\": \"Brief summary of readiness and key points\"\n}`;\n}\n/**\r\n * Extract analysis from LLM response with multiple fallback methods\r\n */ function extractAnalysisFromResponse(responseData) {\n    // Method 1: Standard extraction\n    let analysis = responseData.candidates?.[0]?.content?.parts?.[0]?.text;\n    if (analysis && analysis.trim().length > 0) {\n        return analysis;\n    }\n    // Method 2: Check for alternative response structures\n    if (responseData.candidates && responseData.candidates.length > 0) {\n        for (const candidate of responseData.candidates){\n            if (candidate.content && candidate.content.parts) {\n                for (const part of candidate.content.parts){\n                    if (part.text && part.text.trim().length > 0) {\n                        return part.text;\n                    }\n                }\n            }\n        }\n    }\n    // Method 3: Check for direct text response\n    if (responseData.text && responseData.text.trim().length > 0) {\n        return responseData.text;\n    }\n    // Method 4: Check for any text content in the response\n    const responseStr = JSON.stringify(responseData);\n    const textMatches = responseStr.match(/\"text\"\\s*:\\s*\"([^\"]+)\"/g);\n    if (textMatches && textMatches.length > 0) {\n        return textMatches[0].replace(/\"text\"\\s*:\\s*\"/, '').replace(/\"$/, '');\n    }\n    return null;\n}\n/**\r\n * Parse structured response with multiple parsing strategies\r\n */ function parseStructuredResponse(rawAnalysis) {\n    // Clean the response\n    const cleaned = rawAnalysis.trim();\n    // Strategy 1: Direct JSON parse\n    try {\n        return JSON.parse(cleaned);\n    } catch (e) {\n    // Continue to next strategy\n    }\n    // Strategy 2: Extract JSON from text\n    const jsonMatch = cleaned.match(/\\{[\\s\\S]*\\}/);\n    if (jsonMatch) {\n        try {\n            return JSON.parse(jsonMatch[0]);\n        } catch (e) {\n        // Continue to next strategy\n        }\n    }\n    // Strategy 3: Try to find and parse nested JSON\n    const nestedJsonMatch = cleaned.match(/```json\\s*(\\{[\\s\\S]*?\\})\\s*```/);\n    if (nestedJsonMatch) {\n        try {\n            return JSON.parse(nestedJsonMatch[1]);\n        } catch (e) {\n        // Continue to next strategy\n        }\n    }\n    // Strategy 4: Build basic structure from text\n    return extractPartialData(cleaned);\n}\n/**\r\n * Extract partial data from unstructured response\r\n */ function extractPartialData(text) {\n    const partialData = {\n        overallScore: {\n            total: 75,\n            breakdown: {}\n        },\n        criticalIssues: [],\n        strengths: [],\n        opportunities: [],\n        recommendations: [],\n        riskAssessment: [],\n        successProbability: {\n            percentage: 75,\n            confidence: \"Medium\",\n            factors: []\n        },\n        nextSteps: [],\n        summary: \"Analysis partially extracted from unstructured response.\"\n    };\n    // Try to extract score\n    const scoreMatch = text.match(/score[:\\s]*(\\d+)/i);\n    if (scoreMatch) {\n        partialData.overallScore.total = parseInt(scoreMatch[1]);\n    }\n    // Try to extract issues\n    const issueMatches = text.match(/(?:issue|problem|concern)[s]?[:\\s]*([^\\n.]+)/gi);\n    if (issueMatches) {\n        partialData.criticalIssues = issueMatches.slice(0, 3).map((match)=>match.replace(/(?:issue|problem|concern)[s]?[:\\s]*/i, '').trim());\n    }\n    return partialData;\n}\n/**\r\n * Generate fallback analysis when LLM fails completely\r\n */ function generateFallbackAnalysis(eventDetails, errorMessage) {\n    const fallbackData = {\n        overallScore: {\n            total: 70,\n            breakdown: {\n                weather: 75,\n                competition: 65,\n                historical: 70,\n                budget: 70,\n                logistics: 75\n            }\n        },\n        criticalIssues: [\n            \"LLM analysis service temporarily unavailable\",\n            \"Using fallback assessment based on basic event parameters\"\n        ],\n        strengths: [\n            \"Event planning process is active and organized\",\n            \"Multiple data sources being considered for decision making\"\n        ],\n        opportunities: [\n            \"Retry analysis when service is restored\",\n            \"Manual review of individual agent reports\"\n        ],\n        recommendations: [\n            {\n                category: \"System\",\n                priority: \"High\",\n                action: \"Retry automated analysis or conduct manual review\",\n                timeline: \"Immediate\",\n                impact: \"Ensures proper event assessment\"\n            }\n        ],\n        riskAssessment: [\n            {\n                risk: \"Incomplete automated analysis\",\n                probability: \"High\",\n                impact: \"Medium\",\n                mitigation: \"Manual review of source data and expert consultation\"\n            }\n        ],\n        successProbability: {\n            percentage: 70,\n            confidence: \"Low\",\n            factors: [\n                \"Limited analysis due to system error\",\n                \"Base event parameters appear viable\"\n            ]\n        },\n        nextSteps: [\n            \"Review individual agent reports manually\",\n            \"Retry automated analysis\",\n            \"Consult with event planning experts\"\n        ],\n        summary: `Automated analysis temporarily unavailable due to: ${errorMessage}. Fallback assessment suggests moderate readiness with need for manual review.`\n    };\n    return formatStructuredAnalysis(fallbackData, eventDetails);\n}\n/**\r\n * Format raw analysis when structured parsing fails\r\n */ function formatRawAnalysis(rawAnalysis, eventDetails) {\n    return `🎯 EVENT READINESS ASSESSMENT (Raw Analysis)\n\n📊 ANALYSIS OUTPUT:\n${rawAnalysis}\n\n---\n⚠️ Note: This analysis was provided in unstructured format and may require manual interpretation.\n\nGenerated: ${new Date().toISOString()}\nEvent: ${eventDetails.eventType} in ${eventDetails.location} on ${eventDetails.date}`;\n}\n/**\r\n * Format structured analysis data into a comprehensive report\r\n */ function formatStructuredAnalysis(data, eventDetails) {\n    const { overallScore, criticalIssues, strengths, opportunities, recommendations, riskAssessment, successProbability, nextSteps, summary } = data;\n    return `🎯 COMPREHENSIVE EVENT READINESS ASSESSMENT\n\n📊 OVERALL READINESS SCORE: ${overallScore?.total || 'N/A'}/100\n\n${overallScore?.breakdown ? `\n📈 SCORE BREAKDOWN:\n• Weather Conditions: ${overallScore.breakdown.weather || 'N/A'}/100\n• Competition Analysis: ${overallScore.breakdown.competition || 'N/A'}/100\n• Historical Performance: ${overallScore.breakdown.historical || 'N/A'}/100\n• Budget Adequacy: ${overallScore.breakdown.budget || 'N/A'}/100\n• Logistics Planning: ${overallScore.breakdown.logistics || 'N/A'}/100\n` : ''}\n\n🚨 CRITICAL ISSUES:\n${criticalIssues && criticalIssues.length > 0 ? criticalIssues.map((issue, index)=>`${index + 1}. ${issue}`).join('\\n') : '• No critical issues identified'}\n\n✅ STRENGTHS:\n${strengths && strengths.length > 0 ? strengths.map((strength, index)=>`${index + 1}. ${strength}`).join('\\n') : '• No specific strengths identified'}\n\n🎯 OPPORTUNITIES:\n${opportunities && opportunities.length > 0 ? opportunities.map((opportunity, index)=>`${index + 1}. ${opportunity}`).join('\\n') : '• No specific opportunities identified'}\n\n📋 DETAILED RECOMMENDATIONS:\n${recommendations && recommendations.length > 0 ? recommendations.map((rec, index)=>`${index + 1}. [${rec.priority || 'Medium'} Priority] ${rec.category || 'General'}\n   Action: ${rec.action || 'No specific action provided'}\n   Timeline: ${rec.timeline || 'Not specified'}\n   Impact: ${rec.impact || 'Not specified'}`).join('\\n\\n') : '• No specific recommendations provided'}\n\n⚠️ RISK ASSESSMENT:\n${riskAssessment && riskAssessment.length > 0 ? riskAssessment.map((risk, index)=>`${index + 1}. ${risk.risk || 'Unspecified risk'}\n   Probability: ${risk.probability || 'Unknown'} | Impact: ${risk.impact || 'Unknown'}\n   Mitigation: ${risk.mitigation || 'No mitigation strategy provided'}`).join('\\n\\n') : '• No specific risks identified'}\n\n🎲 SUCCESS PROBABILITY: ${successProbability?.percentage || 'N/A'}%\nConfidence Level: ${successProbability?.confidence || 'Unknown'}\n${successProbability?.factors && successProbability.factors.length > 0 ? `Key Factors: ${successProbability.factors.join(', ')}` : ''}\n\n📅 IMMEDIATE NEXT STEPS:\n${nextSteps && nextSteps.length > 0 ? nextSteps.map((step, index)=>`${index + 1}. ${step}`).join('\\n') : '• No specific next steps provided'}\n\n📝 EXECUTIVE SUMMARY:\n${summary || 'No summary provided'}\n\n---\nGenerated: ${new Date().toISOString()}\nEvent: ${eventDetails.eventType} in ${eventDetails.location} on ${eventDetails.date}`;\n}\n/**\r\n * Fetch with retry logic and timeout - Enhanced version\r\n */ async function fetchWithRetry(url, maxRetries, timeout, options) {\n    let lastError = null;\n    for(let attempt = 1; attempt <= maxRetries; attempt++){\n        try {\n            console.log(`LLM Request attempt ${attempt}/${maxRetries}`);\n            const controller = new AbortController();\n            const timeoutId = setTimeout(()=>{\n                console.log(`Request timeout after ${timeout}ms`);\n                controller.abort();\n            }, timeout);\n            const response = await fetch(url, {\n                ...options,\n                signal: controller.signal\n            });\n            clearTimeout(timeoutId);\n            if (response.ok) {\n                console.log(`LLM Request successful on attempt ${attempt}`);\n                return response;\n            } else {\n                // Log non-success responses but continue retrying for certain status codes\n                console.log(`LLM Request failed with status ${response.status} on attempt ${attempt}`);\n                if (response.status >= 500 || response.status === 429) {\n                    // Server errors or rate limits - retry\n                    lastError = new Error(`HTTP ${response.status}: ${response.statusText}`);\n                } else {\n                    // Client errors - don't retry\n                    return response;\n                }\n            }\n        } catch (error) {\n            console.error(`LLM Request attempt ${attempt} failed:`, error);\n            lastError = error instanceof Error ? error : new Error('Unknown fetch error');\n            if (attempt === maxRetries) {\n                break;\n            }\n            // Exponential backoff with jitter\n            const baseDelay = Math.pow(2, attempt) * 1000;\n            const jitter = Math.random() * 1000;\n            const delay = baseDelay + jitter;\n            console.log(`Retrying in ${delay}ms...`);\n            await new Promise((resolve)=>setTimeout(resolve, delay));\n        }\n    }\n    throw lastError || new Error('Max retries exceeded');\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/agents/organizerScoringAgent.ts\n");

/***/ }),

/***/ "(rsc)/./lib/agents/weatherAgent.ts":
/*!************************************!*\
  !*** ./lib/agents/weatherAgent.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   run: () => (/* binding */ run)\n/* harmony export */ });\n/**\r\n * Weather Agent - Fetches weather data for event planning using OpenWeatherMap API\r\n * @param payload - Contains location, date, and event details\r\n * @returns Weather analysis and recommendations\r\n */ async function run(payload) {\n    const { location, date, eventType } = payload;\n    if (!location || !date) {\n        throw new Error('Location and date are required for weather analysis');\n    }\n    const weatherApiKey = \"b2ff35a7538f58c5d01d64faf5e2c104\";\n    if (!weatherApiKey) {\n        throw new Error('WEATHER_API_KEY not configured');\n    }\n    try {\n        // First, get coordinates for the location using OpenWeatherMap Geocoding API\n        const geocodeResponse = await fetchWithRetry(`https://api.openweathermap.org/geo/1.0/direct?q=${encodeURIComponent(location)}&limit=1&appid=${weatherApiKey}`, 3, 10000);\n        if (!geocodeResponse.ok) {\n            throw new Error(`Geocoding API error: ${geocodeResponse.status}`);\n        }\n        const geocodeData = await geocodeResponse.json();\n        if (!geocodeData || geocodeData.length === 0) {\n            throw new Error(`Location \"${location}\" not found`);\n        }\n        const { lat, lon } = geocodeData[0];\n        // Get current weather and forecast data\n        const weatherResponse = await fetchWithRetry(`https://api.openweathermap.org/data/2.5/forecast?lat=${lat}&lon=${lon}&appid=${weatherApiKey}&units=metric`, 3, 10000);\n        if (!weatherResponse.ok) {\n            throw new Error(`Weather API error: ${weatherResponse.status}`);\n        }\n        const weatherData = await weatherResponse.json();\n        // Find the forecast closest to the event date\n        const eventDate = new Date(date);\n        const eventTimestamp = eventDate.getTime();\n        let closestForecast = weatherData.list[0];\n        let minTimeDiff = Math.abs(new Date(closestForecast.dt * 1000).getTime() - eventTimestamp);\n        for (const forecast of weatherData.list){\n            const forecastTime = new Date(forecast.dt * 1000).getTime();\n            const timeDiff = Math.abs(forecastTime - eventTimestamp);\n            if (timeDiff < minTimeDiff) {\n                minTimeDiff = timeDiff;\n                closestForecast = forecast;\n            }\n        }\n        const { main, weather, wind } = closestForecast;\n        const temperature = main.temp;\n        const humidity = main.humidity;\n        const condition = weather[0].main;\n        const description = weather[0].description;\n        const windSpeed = wind.speed;\n        // Generate recommendations based on weather\n        let recommendations = [];\n        if (temperature < 10) {\n            recommendations.push(\"Consider indoor venue or provide heating\");\n        } else if (temperature > 30) {\n            recommendations.push(\"Ensure adequate shade and hydration stations\");\n        }\n        if (humidity > 80) {\n            recommendations.push(\"High humidity expected - consider ventilation\");\n        }\n        if (windSpeed > 10) {\n            recommendations.push(\"High winds expected - secure outdoor equipment and decorations\");\n        }\n        if (condition.toLowerCase().includes('rain')) {\n            recommendations.push(\"Rain expected - prepare backup indoor plan\");\n        } else if (condition.toLowerCase().includes('snow')) {\n            recommendations.push(\"Snow expected - ensure safe pathways and parking\");\n        } else if (condition.toLowerCase().includes('thunderstorm')) {\n            recommendations.push(\"Thunderstorms possible - consider postponing outdoor activities\");\n        }\n        return `🌤️ WEATHER ANALYSIS REPORT\n\n📍 Location: ${location}\n📅 Event Date: ${date}\n🎪 Event Type: ${eventType}\n\n🌡️ CURRENT FORECAST:\n• Temperature: ${temperature.toFixed(1)}°C (${temperature < 10 ? 'Cold' : temperature > 30 ? 'Hot' : 'Comfortable'})\n• Humidity: ${humidity}% (${humidity > 80 ? 'High' : humidity < 40 ? 'Low' : 'Moderate'})\n• Wind Speed: ${windSpeed} m/s (${windSpeed > 10 ? 'Strong' : windSpeed > 5 ? 'Moderate' : 'Light'})\n• Conditions: ${condition} - ${description}\n\n📊 WEATHER IMPACT ASSESSMENT:\n• Overall Suitability: ${getWeatherSuitability(temperature, humidity, windSpeed, condition)}\n• Risk Level: ${getRiskLevel(condition, windSpeed)}\n• Comfort Index: ${getComfortIndex(temperature, humidity, windSpeed)}/10\n\n🎯 SPECIFIC RECOMMENDATIONS:\n${recommendations.length > 0 ? recommendations.map((r, i)=>`${i + 1}. ${r}`).join('\\n') : '• Weather conditions appear favorable for your event'}\n\n📈 ADDITIONAL INSIGHTS:\n• Best Time of Day: ${getBestTimeOfDay(temperature, condition)}\n• Equipment Needs: ${getEquipmentNeeds(condition, windSpeed)}\n• Backup Plan: ${getBackupPlan(condition)}\n\n🔍 DATA SOURCES:\n• Primary: OpenWeatherMap API (5-day forecast)\n• Confidence: High (real-time meteorological data)\n• Last Updated: ${new Date().toISOString()}\n\n---\nGenerated for: ${eventType} in ${location} on ${date}`;\n    } catch (error) {\n        console.error('Weather agent error:', error);\n        return `Unable to fetch weather data for ${location}. Error: ${error instanceof Error ? error.message : 'Unknown error'}`;\n    }\n}\n/**\r\n * Fetch with retry logic and timeout\r\n */ async function fetchWithRetry(url, maxRetries, timeout) {\n    for(let attempt = 1; attempt <= maxRetries; attempt++){\n        try {\n            const controller = new AbortController();\n            const timeoutId = setTimeout(()=>controller.abort(), timeout);\n            const response = await fetch(url, {\n                signal: controller.signal,\n                headers: {\n                    'Content-Type': 'application/json'\n                }\n            });\n            clearTimeout(timeoutId);\n            return response;\n        } catch (error) {\n            if (attempt === maxRetries) {\n                throw error;\n            }\n            // Wait before retry (exponential backoff)\n            await new Promise((resolve)=>setTimeout(resolve, Math.pow(2, attempt) * 1000));\n        }\n    }\n    throw new Error('Max retries exceeded');\n}\n/**\r\n * Get weather suitability rating\r\n */ function getWeatherSuitability(temp, humidity, windSpeed, condition) {\n    let score = 0;\n    // Temperature scoring\n    if (temp >= 15 && temp <= 25) score += 3;\n    else if (temp >= 10 && temp <= 30) score += 2;\n    else if (temp >= 5 && temp <= 35) score += 1;\n    // Humidity scoring\n    if (humidity >= 40 && humidity <= 70) score += 2;\n    else if (humidity >= 30 && humidity <= 80) score += 1;\n    // Wind scoring\n    if (windSpeed <= 5) score += 2;\n    else if (windSpeed <= 10) score += 1;\n    // Condition scoring\n    if (condition.toLowerCase().includes('clear') || condition.toLowerCase().includes('sunny')) score += 2;\n    else if (condition.toLowerCase().includes('cloudy') || condition.toLowerCase().includes('partly')) score += 1;\n    else if (condition.toLowerCase().includes('rain') || condition.toLowerCase().includes('storm')) score -= 2;\n    if (score >= 7) return 'Excellent';\n    if (score >= 5) return 'Good';\n    if (score >= 3) return 'Fair';\n    if (score >= 1) return 'Poor';\n    return 'Very Poor';\n}\n/**\r\n * Get risk level assessment\r\n */ function getRiskLevel(condition, windSpeed) {\n    if (condition.toLowerCase().includes('thunderstorm') || windSpeed > 15) return 'High';\n    if (condition.toLowerCase().includes('rain') || condition.toLowerCase().includes('snow') || windSpeed > 10) return 'Medium';\n    return 'Low';\n}\n/**\r\n * Get comfort index (1-10)\r\n */ function getComfortIndex(temp, humidity, windSpeed) {\n    let index = 5 // Base score\n    ;\n    // Temperature adjustment\n    if (temp >= 18 && temp <= 24) index += 2;\n    else if (temp >= 15 && temp <= 27) index += 1;\n    else if (temp < 10 || temp > 32) index -= 2;\n    else if (temp < 15 || temp > 28) index -= 1;\n    // Humidity adjustment\n    if (humidity >= 40 && humidity <= 60) index += 1;\n    else if (humidity > 80 || humidity < 30) index -= 1;\n    // Wind adjustment\n    if (windSpeed <= 3) index += 1;\n    else if (windSpeed > 10) index -= 1;\n    return Math.max(1, Math.min(10, index));\n}\n/**\r\n * Get best time of day recommendation\r\n */ function getBestTimeOfDay(temp, condition) {\n    if (condition.toLowerCase().includes('rain') || condition.toLowerCase().includes('storm')) {\n        return 'Indoor venue recommended';\n    }\n    if (temp > 30) {\n        return 'Early morning or late afternoon (avoid 12-4 PM)';\n    }\n    if (temp < 10) {\n        return 'Midday when temperatures are warmest';\n    }\n    return 'Any time of day should be comfortable';\n}\n/**\r\n * Get equipment needs\r\n */ function getEquipmentNeeds(condition, windSpeed) {\n    const needs = [];\n    if (condition.toLowerCase().includes('rain')) needs.push('Covered areas or tents');\n    if (condition.toLowerCase().includes('sun')) needs.push('Shade structures');\n    if (windSpeed > 5) needs.push('Wind barriers or secure equipment');\n    if (condition.toLowerCase().includes('snow')) needs.push('Heating and snow removal equipment');\n    return needs.length > 0 ? needs.join(', ') : 'Standard outdoor equipment';\n}\n/**\r\n * Get backup plan recommendation\r\n */ function getBackupPlan(condition) {\n    if (condition.toLowerCase().includes('thunderstorm')) {\n        return 'Indoor venue or postponement strongly recommended';\n    }\n    if (condition.toLowerCase().includes('rain')) {\n        return 'Covered areas or indoor backup venue';\n    }\n    if (condition.toLowerCase().includes('snow')) {\n        return 'Indoor venue or heated outdoor areas';\n    }\n    return 'Current conditions should be manageable';\n}\n/**\r\n * Get most common element in array\r\n */ function getMostCommon(arr) {\n    const counts = {};\n    arr.forEach((item)=>{\n        counts[item] = (counts[item] || 0) + 1;\n    });\n    return Object.keys(counts).reduce((a, b)=>counts[a] > counts[b] ? a : b);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/agents/weatherAgent.ts\n");

/***/ }),

/***/ "(rsc)/./lib/supabaseClient.ts":
/*!*******************************!*\
  !*** ./lib/supabaseClient.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   supabase: () => (/* binding */ supabase),\n/* harmony export */   supabaseAdmin: () => (/* binding */ supabaseAdmin)\n/* harmony export */ });\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @supabase/supabase-js */ \"(rsc)/./node_modules/.pnpm/@supabase+supabase-js@2.57.4/node_modules/@supabase/supabase-js/dist/module/index.js\");\n\nconst supabaseUrl = \"https://deffyzoqxiwksooxbbac.supabase.co/\";\nconst supabaseAnonKey = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImRlZmZ5em9xeGl3a3Nvb3hiYmFjIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTc3Mzg1MDgsImV4cCI6MjA3MzMxNDUwOH0.QAVHx3jmU6Uf4BjL3vZW717JT5mgZ3IBb9jCsOrHrRA\";\nif (!supabaseUrl || !supabaseAnonKey) {\n    throw new Error('Missing Supabase environment variables');\n}\n/**\r\n * Supabase client for client-side operations\r\n */ const supabase = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(supabaseUrl, supabaseAnonKey);\n/**\r\n * Supabase client for server-side operations with service role key\r\n * Note: In production, use a service role key for server operations\r\n */ const supabaseAdmin = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(supabaseUrl, process.env.SUPABASE_SERVICE_ROLE_KEY || supabaseAnonKey, {\n    auth: {\n        autoRefreshToken: false,\n        persistSession: false\n    }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9saWIvc3VwYWJhc2VDbGllbnQudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQW9EO0FBRXBELE1BQU1DLGNBQWNDLDJDQUF3QjtBQUM1QyxNQUFNRyxrQkFBa0JILGtOQUF3QjtBQUVoRCxJQUFJLENBQUNELGVBQWUsQ0FBQ0ksaUJBQWlCO0lBQ3BDLE1BQU0sSUFBSUUsTUFBTTtBQUNsQjtBQUVBOztDQUVDLEdBQ00sTUFBTUMsV0FBV1IsbUVBQVlBLENBQUNDLGFBQWFJLGlCQUFnQjtBQUVsRTs7O0NBR0MsR0FDTSxNQUFNSSxnQkFBZ0JULG1FQUFZQSxDQUN2Q0MsYUFDQUMsUUFBUUMsR0FBRyxDQUFDTyx5QkFBeUIsSUFBSUwsaUJBQ3pDO0lBQ0VNLE1BQU07UUFDSkMsa0JBQWtCO1FBQ2xCQyxnQkFBZ0I7SUFDbEI7QUFDRixHQUNEIiwic291cmNlcyI6WyIvVXNlcnMvd2lsbHJvY2hlL0Rlc2t0b3AvSG9wSGFja3MyMDI1L2xpYi9zdXBhYmFzZUNsaWVudC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVDbGllbnQgfSBmcm9tICdAc3VwYWJhc2Uvc3VwYWJhc2UtanMnXHJcblxyXG5jb25zdCBzdXBhYmFzZVVybCA9IHByb2Nlc3MuZW52LlNVUEFCQVNFX1VSTCFcclxuY29uc3Qgc3VwYWJhc2VBbm9uS2V5ID0gcHJvY2Vzcy5lbnYuU1VQQUJBU0VfS0VZIVxyXG5cclxuaWYgKCFzdXBhYmFzZVVybCB8fCAhc3VwYWJhc2VBbm9uS2V5KSB7XHJcbiAgdGhyb3cgbmV3IEVycm9yKCdNaXNzaW5nIFN1cGFiYXNlIGVudmlyb25tZW50IHZhcmlhYmxlcycpXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBTdXBhYmFzZSBjbGllbnQgZm9yIGNsaWVudC1zaWRlIG9wZXJhdGlvbnNcclxuICovXHJcbmV4cG9ydCBjb25zdCBzdXBhYmFzZSA9IGNyZWF0ZUNsaWVudChzdXBhYmFzZVVybCwgc3VwYWJhc2VBbm9uS2V5KVxyXG5cclxuLyoqXHJcbiAqIFN1cGFiYXNlIGNsaWVudCBmb3Igc2VydmVyLXNpZGUgb3BlcmF0aW9ucyB3aXRoIHNlcnZpY2Ugcm9sZSBrZXlcclxuICogTm90ZTogSW4gcHJvZHVjdGlvbiwgdXNlIGEgc2VydmljZSByb2xlIGtleSBmb3Igc2VydmVyIG9wZXJhdGlvbnNcclxuICovXHJcbmV4cG9ydCBjb25zdCBzdXBhYmFzZUFkbWluID0gY3JlYXRlQ2xpZW50KFxyXG4gIHN1cGFiYXNlVXJsLFxyXG4gIHByb2Nlc3MuZW52LlNVUEFCQVNFX1NFUlZJQ0VfUk9MRV9LRVkgfHwgc3VwYWJhc2VBbm9uS2V5LFxyXG4gIHtcclxuICAgIGF1dGg6IHtcclxuICAgICAgYXV0b1JlZnJlc2hUb2tlbjogZmFsc2UsXHJcbiAgICAgIHBlcnNpc3RTZXNzaW9uOiBmYWxzZVxyXG4gICAgfVxyXG4gIH1cclxuKVxyXG5cclxuLyoqXHJcbiAqIERhdGFiYXNlIHR5cGVzIGZvciBUeXBlU2NyaXB0XHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIERhdGFiYXNlIHtcclxuICBwdWJsaWM6IHtcclxuICAgIFRhYmxlczoge1xyXG4gICAgICB1c2Vyczoge1xyXG4gICAgICAgIFJvdzoge1xyXG4gICAgICAgICAgaWQ6IHN0cmluZ1xyXG4gICAgICAgICAgZW1haWw6IHN0cmluZ1xyXG4gICAgICAgICAgY3JlYXRlZF9hdDogc3RyaW5nXHJcbiAgICAgICAgfVxyXG4gICAgICAgIEluc2VydDoge1xyXG4gICAgICAgICAgaWQ/OiBzdHJpbmdcclxuICAgICAgICAgIGVtYWlsOiBzdHJpbmdcclxuICAgICAgICAgIGNyZWF0ZWRfYXQ/OiBzdHJpbmdcclxuICAgICAgICB9XHJcbiAgICAgICAgVXBkYXRlOiB7XHJcbiAgICAgICAgICBpZD86IHN0cmluZ1xyXG4gICAgICAgICAgZW1haWw/OiBzdHJpbmdcclxuICAgICAgICAgIGNyZWF0ZWRfYXQ/OiBzdHJpbmdcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgZXZlbnRzOiB7XHJcbiAgICAgICAgUm93OiB7XHJcbiAgICAgICAgICBpZDogc3RyaW5nXHJcbiAgICAgICAgICB1c2VyX2lkOiBzdHJpbmdcclxuICAgICAgICAgIGlucHV0X3BhcmFtczogYW55XHJcbiAgICAgICAgICBhY3R1YWxzOiBhbnlcclxuICAgICAgICAgIGNyZWF0ZWRfYXQ6IHN0cmluZ1xyXG4gICAgICAgIH1cclxuICAgICAgICBJbnNlcnQ6IHtcclxuICAgICAgICAgIGlkPzogc3RyaW5nXHJcbiAgICAgICAgICB1c2VyX2lkOiBzdHJpbmdcclxuICAgICAgICAgIGlucHV0X3BhcmFtczogYW55XHJcbiAgICAgICAgICBhY3R1YWxzPzogYW55XHJcbiAgICAgICAgICBjcmVhdGVkX2F0Pzogc3RyaW5nXHJcbiAgICAgICAgfVxyXG4gICAgICAgIFVwZGF0ZToge1xyXG4gICAgICAgICAgaWQ/OiBzdHJpbmdcclxuICAgICAgICAgIHVzZXJfaWQ/OiBzdHJpbmdcclxuICAgICAgICAgIGlucHV0X3BhcmFtcz86IGFueVxyXG4gICAgICAgICAgYWN0dWFscz86IGFueVxyXG4gICAgICAgICAgY3JlYXRlZF9hdD86IHN0cmluZ1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBhZ2VudF9yZXN1bHRzOiB7XHJcbiAgICAgICAgUm93OiB7XHJcbiAgICAgICAgICBpZDogc3RyaW5nXHJcbiAgICAgICAgICBldmVudF9pZDogc3RyaW5nXHJcbiAgICAgICAgICBhZ2VudF9uYW1lOiBzdHJpbmdcclxuICAgICAgICAgIHJlc3BvbnNlX3RleHQ6IHN0cmluZ1xyXG4gICAgICAgICAgY3JlYXRlZF9hdDogc3RyaW5nXHJcbiAgICAgICAgfVxyXG4gICAgICAgIEluc2VydDoge1xyXG4gICAgICAgICAgaWQ/OiBzdHJpbmdcclxuICAgICAgICAgIGV2ZW50X2lkOiBzdHJpbmdcclxuICAgICAgICAgIGFnZW50X25hbWU6IHN0cmluZ1xyXG4gICAgICAgICAgcmVzcG9uc2VfdGV4dDogc3RyaW5nXHJcbiAgICAgICAgICBjcmVhdGVkX2F0Pzogc3RyaW5nXHJcbiAgICAgICAgfVxyXG4gICAgICAgIFVwZGF0ZToge1xyXG4gICAgICAgICAgaWQ/OiBzdHJpbmdcclxuICAgICAgICAgIGV2ZW50X2lkPzogc3RyaW5nXHJcbiAgICAgICAgICBhZ2VudF9uYW1lPzogc3RyaW5nXHJcbiAgICAgICAgICByZXNwb25zZV90ZXh0Pzogc3RyaW5nXHJcbiAgICAgICAgICBjcmVhdGVkX2F0Pzogc3RyaW5nXHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiJdLCJuYW1lcyI6WyJjcmVhdGVDbGllbnQiLCJzdXBhYmFzZVVybCIsInByb2Nlc3MiLCJlbnYiLCJTVVBBQkFTRV9VUkwiLCJzdXBhYmFzZUFub25LZXkiLCJTVVBBQkFTRV9LRVkiLCJFcnJvciIsInN1cGFiYXNlIiwic3VwYWJhc2VBZG1pbiIsIlNVUEFCQVNFX1NFUlZJQ0VfUk9MRV9LRVkiLCJhdXRoIiwiYXV0b1JlZnJlc2hUb2tlbiIsInBlcnNpc3RTZXNzaW9uIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./lib/supabaseClient.ts\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/next@15.5.3_react-dom@19.1.1_react@19.1.1__react@19.1.1/node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fagent%2Froute&page=%2Fapi%2Fagent%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fagent%2Froute.ts&appDir=%2FUsers%2Fwillroche%2FDesktop%2FHopHacks2025%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fwillroche%2FDesktop%2FHopHacks2025&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!":

  !*** ./node_modules/.pnpm/next@15.5.3_react-dom@19.1.1_react@19.1.1__react@19.1.1/node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fagent%2Froute&page=%2Fapi%2Fagent%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fagent%2Froute.ts&appDir=%2FUsers%2Fwillroche%2FDesktop%2FHopHacks2025%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fwillroche%2FDesktop%2FHopHacks2025&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   handler: () => (/* binding */ handler),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   workAsyncStorage: () => (/* binding */ workAsyncStorage),\n/* harmony export */   workUnitAsyncStorage: () => (/* binding */ workUnitAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/.pnpm/next@15.5.3_react-dom@19.1.1_react@19.1.1__react@19.1.1/node_modules/next/dist/server/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(rsc)/./node_modules/.pnpm/next@15.5.3_react-dom@19.1.1_react@19.1.1__react@19.1.1/node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/.pnpm/next@15.5.3_react-dom@19.1.1_react@19.1.1__react@19.1.1/node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/dist/server/request-meta */ \"(rsc)/./node_modules/.pnpm/next@15.5.3_react-dom@19.1.1_react@19.1.1__react@19.1.1/node_modules/next/dist/server/request-meta.js\");\n/* harmony import */ var next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! next/dist/server/lib/trace/tracer */ \"(rsc)/./node_modules/.pnpm/next@15.5.3_react-dom@19.1.1_react@19.1.1__react@19.1.1/node_modules/next/dist/server/lib/trace/tracer.js\");\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! next/dist/shared/lib/router/utils/app-paths */ \"next/dist/shared/lib/router/utils/app-paths\");\n/* harmony import */ var next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! next/dist/server/base-http/node */ \"(rsc)/./node_modules/.pnpm/next@15.5.3_react-dom@19.1.1_react@19.1.1__react@19.1.1/node_modules/next/dist/server/base-http/node.js\");\n/* harmony import */ var next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! next/dist/server/web/spec-extension/adapters/next-request */ \"(rsc)/./node_modules/.pnpm/next@15.5.3_react-dom@19.1.1_react@19.1.1__react@19.1.1/node_modules/next/dist/server/web/spec-extension/adapters/next-request.js\");\n/* harmony import */ var next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! next/dist/server/lib/trace/constants */ \"(rsc)/./node_modules/.pnpm/next@15.5.3_react-dom@19.1.1_react@19.1.1__react@19.1.1/node_modules/next/dist/server/lib/trace/constants.js\");\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! next/dist/server/instrumentation/utils */ \"(rsc)/./node_modules/.pnpm/next@15.5.3_react-dom@19.1.1_react@19.1.1__react@19.1.1/node_modules/next/dist/server/instrumentation/utils.js\");\n/* harmony import */ var next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! next/dist/server/send-response */ \"(rsc)/./node_modules/.pnpm/next@15.5.3_react-dom@19.1.1_react@19.1.1__react@19.1.1/node_modules/next/dist/server/send-response.js\");\n/* harmony import */ var next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! next/dist/server/web/utils */ \"(rsc)/./node_modules/.pnpm/next@15.5.3_react-dom@19.1.1_react@19.1.1__react@19.1.1/node_modules/next/dist/server/web/utils.js\");\n/* harmony import */ var next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__);\n/* harmony import */ var next_dist_server_lib_cache_control__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! next/dist/server/lib/cache-control */ \"(rsc)/./node_modules/.pnpm/next@15.5.3_react-dom@19.1.1_react@19.1.1__react@19.1.1/node_modules/next/dist/server/lib/cache-control.js\");\n/* harmony import */ var next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! next/dist/lib/constants */ \"(rsc)/./node_modules/.pnpm/next@15.5.3_react-dom@19.1.1_react@19.1.1__react@19.1.1/node_modules/next/dist/lib/constants.js\");\n/* harmony import */ var next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__);\n/* harmony import */ var next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! next/dist/shared/lib/no-fallback-error.external */ \"next/dist/shared/lib/no-fallback-error.external\");\n/* harmony import */ var next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__);\n/* harmony import */ var next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! next/dist/server/response-cache */ \"(rsc)/./node_modules/.pnpm/next@15.5.3_react-dom@19.1.1_react@19.1.1__react@19.1.1/node_modules/next/dist/server/response-cache/index.js\");\n/* harmony import */ var next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__);\n/* harmony import */ var _Users_willroche_Desktop_HopHacks2025_app_api_agent_route_ts__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./app/api/agent/route.ts */ \"(rsc)/./app/api/agent/route.ts\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/agent/route\",\n        pathname: \"/api/agent\",\n        filename: \"route\",\n        bundlePath: \"app/api/agent/route\"\n    },\n    distDir: \".next\" || 0,\n    relativeProjectDir:  false || '',\n    resolvedPagePath: \"/Users/willroche/Desktop/HopHacks2025/app/api/agent/route.ts\",\n    nextConfigOutput,\n    userland: _Users_willroche_Desktop_HopHacks2025_app_api_agent_route_ts__WEBPACK_IMPORTED_MODULE_16__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        workAsyncStorage,\n        workUnitAsyncStorage\n    });\n}\n\nasync function handler(req, res, ctx) {\n    var _nextConfig_experimental;\n    let srcPage = \"/api/agent/route\";\n    // turbopack doesn't normalize `/index` in the page name\n    // so we need to to process dynamic routes properly\n    // TODO: fix turbopack providing differing value from webpack\n    if (false) {} else if (srcPage === '/index') {\n        // we always normalize /index specifically\n        srcPage = '/';\n    }\n    const multiZoneDraftMode = false;\n    const prepareResult = await routeModule.prepare(req, res, {\n        srcPage,\n        multiZoneDraftMode\n    });\n    if (!prepareResult) {\n        res.statusCode = 400;\n        res.end('Bad Request');\n        ctx.waitUntil == null ? void 0 : ctx.waitUntil.call(ctx, Promise.resolve());\n        return null;\n    }\n    const { buildId, params, nextConfig, isDraftMode, prerenderManifest, routerServerContext, isOnDemandRevalidate, revalidateOnlyGenerated, resolvedPathname } = prepareResult;\n    const normalizedSrcPage = (0,next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__.normalizeAppPath)(srcPage);\n    let isIsr = Boolean(prerenderManifest.dynamicRoutes[normalizedSrcPage] || prerenderManifest.routes[resolvedPathname]);\n    if (isIsr && !isDraftMode) {\n        const isPrerendered = Boolean(prerenderManifest.routes[resolvedPathname]);\n        const prerenderInfo = prerenderManifest.dynamicRoutes[normalizedSrcPage];\n        if (prerenderInfo) {\n            if (prerenderInfo.fallback === false && !isPrerendered) {\n                throw new next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__.NoFallbackError();\n            }\n        }\n    }\n    let cacheKey = null;\n    if (isIsr && !routeModule.isDev && !isDraftMode) {\n        cacheKey = resolvedPathname;\n        // ensure /index and / is normalized to one key\n        cacheKey = cacheKey === '/index' ? '/' : cacheKey;\n    }\n    const supportsDynamicResponse = // If we're in development, we always support dynamic HTML\n    routeModule.isDev === true || // If this is not SSG or does not have static paths, then it supports\n    // dynamic HTML.\n    !isIsr;\n    // This is a revalidation request if the request is for a static\n    // page and it is not being resumed from a postponed render and\n    // it is not a dynamic RSC request then it is a revalidation\n    // request.\n    const isRevalidate = isIsr && !supportsDynamicResponse;\n    const method = req.method || 'GET';\n    const tracer = (0,next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__.getTracer)();\n    const activeSpan = tracer.getActiveScopeSpan();\n    const context = {\n        params,\n        prerenderManifest,\n        renderOpts: {\n            experimental: {\n                cacheComponents: Boolean(nextConfig.experimental.cacheComponents),\n                authInterrupts: Boolean(nextConfig.experimental.authInterrupts)\n            },\n            supportsDynamicResponse,\n            incrementalCache: (0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'incrementalCache'),\n            cacheLifeProfiles: (_nextConfig_experimental = nextConfig.experimental) == null ? void 0 : _nextConfig_experimental.cacheLife,\n            isRevalidate,\n            waitUntil: ctx.waitUntil,\n            onClose: (cb)=>{\n                res.on('close', cb);\n            },\n            onAfterTaskError: undefined,\n            onInstrumentationRequestError: (error, _request, errorContext)=>routeModule.onRequestError(req, error, errorContext, routerServerContext)\n        },\n        sharedContext: {\n            buildId\n        }\n    };\n    const nodeNextReq = new next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__.NodeNextRequest(req);\n    const nodeNextRes = new next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__.NodeNextResponse(res);\n    const nextReq = next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__.NextRequestAdapter.fromNodeNextRequest(nodeNextReq, (0,next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__.signalFromNodeResponse)(res));\n    try {\n        const invokeRouteModule = async (span)=>{\n            return routeModule.handle(nextReq, context).finally(()=>{\n                if (!span) return;\n                span.setAttributes({\n                    'http.status_code': res.statusCode,\n                    'next.rsc': false\n                });\n                const rootSpanAttributes = tracer.getRootSpanAttributes();\n                // We were unable to get attributes, probably OTEL is not enabled\n                if (!rootSpanAttributes) {\n                    return;\n                }\n                if (rootSpanAttributes.get('next.span_type') !== next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__.BaseServerSpan.handleRequest) {\n                    console.warn(`Unexpected root span type '${rootSpanAttributes.get('next.span_type')}'. Please report this Next.js issue https://github.com/vercel/next.js`);\n                    return;\n                }\n                const route = rootSpanAttributes.get('next.route');\n                if (route) {\n                    const name = `${method} ${route}`;\n                    span.setAttributes({\n                        'next.route': route,\n                        'http.route': route,\n                        'next.span_name': name\n                    });\n                    span.updateName(name);\n                } else {\n                    span.updateName(`${method} ${req.url}`);\n                }\n            });\n        };\n        const handleResponse = async (currentSpan)=>{\n            var _cacheEntry_value;\n            const responseGenerator = async ({ previousCacheEntry })=>{\n                try {\n                    if (!(0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode') && isOnDemandRevalidate && revalidateOnlyGenerated && !previousCacheEntry) {\n                        res.statusCode = 404;\n                        // on-demand revalidate always sets this header\n                        res.setHeader('x-nextjs-cache', 'REVALIDATED');\n                        res.end('This page could not be found');\n                        return null;\n                    }\n                    const response = await invokeRouteModule(currentSpan);\n                    req.fetchMetrics = context.renderOpts.fetchMetrics;\n                    let pendingWaitUntil = context.renderOpts.pendingWaitUntil;\n                    // Attempt using provided waitUntil if available\n                    // if it's not we fallback to sendResponse's handling\n                    if (pendingWaitUntil) {\n                        if (ctx.waitUntil) {\n                            ctx.waitUntil(pendingWaitUntil);\n                            pendingWaitUntil = undefined;\n                        }\n                    }\n                    const cacheTags = context.renderOpts.collectedTags;\n                    // If the request is for a static response, we can cache it so long\n                    // as it's not edge.\n                    if (isIsr) {\n                        const blob = await response.blob();\n                        // Copy the headers from the response.\n                        const headers = (0,next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__.toNodeOutgoingHttpHeaders)(response.headers);\n                        if (cacheTags) {\n                            headers[next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.NEXT_CACHE_TAGS_HEADER] = cacheTags;\n                        }\n                        if (!headers['content-type'] && blob.type) {\n                            headers['content-type'] = blob.type;\n                        }\n                        const revalidate = typeof context.renderOpts.collectedRevalidate === 'undefined' || context.renderOpts.collectedRevalidate >= next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.INFINITE_CACHE ? false : context.renderOpts.collectedRevalidate;\n                        const expire = typeof context.renderOpts.collectedExpire === 'undefined' || context.renderOpts.collectedExpire >= next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.INFINITE_CACHE ? undefined : context.renderOpts.collectedExpire;\n                        // Create the cache entry for the response.\n                        const cacheEntry = {\n                            value: {\n                                kind: next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__.CachedRouteKind.APP_ROUTE,\n                                status: response.status,\n                                body: Buffer.from(await blob.arrayBuffer()),\n                                headers\n                            },\n                            cacheControl: {\n                                revalidate,\n                                expire\n                            }\n                        };\n                        return cacheEntry;\n                    } else {\n                        // send response without caching if not ISR\n                        await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, response, context.renderOpts.pendingWaitUntil);\n                        return null;\n                    }\n                } catch (err) {\n                    // if this is a background revalidate we need to report\n                    // the request error here as it won't be bubbled\n                    if (previousCacheEntry == null ? void 0 : previousCacheEntry.isStale) {\n                        await routeModule.onRequestError(req, err, {\n                            routerKind: 'App Router',\n                            routePath: srcPage,\n                            routeType: 'route',\n                            revalidateReason: (0,next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__.getRevalidateReason)({\n                                isRevalidate,\n                                isOnDemandRevalidate\n                            })\n                        }, routerServerContext);\n                    }\n                    throw err;\n                }\n            };\n            const cacheEntry = await routeModule.handleResponse({\n                req,\n                nextConfig,\n                cacheKey,\n                routeKind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n                isFallback: false,\n                prerenderManifest,\n                isRoutePPREnabled: false,\n                isOnDemandRevalidate,\n                revalidateOnlyGenerated,\n                responseGenerator,\n                waitUntil: ctx.waitUntil\n            });\n            // we don't create a cacheEntry for ISR\n            if (!isIsr) {\n                return null;\n            }\n            if ((cacheEntry == null ? void 0 : (_cacheEntry_value = cacheEntry.value) == null ? void 0 : _cacheEntry_value.kind) !== next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__.CachedRouteKind.APP_ROUTE) {\n                var _cacheEntry_value1;\n                throw Object.defineProperty(new Error(`Invariant: app-route received invalid cache entry ${cacheEntry == null ? void 0 : (_cacheEntry_value1 = cacheEntry.value) == null ? void 0 : _cacheEntry_value1.kind}`), \"__NEXT_ERROR_CODE\", {\n                    value: \"E701\",\n                    enumerable: false,\n                    configurable: true\n                });\n            }\n            if (!(0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode')) {\n                res.setHeader('x-nextjs-cache', isOnDemandRevalidate ? 'REVALIDATED' : cacheEntry.isMiss ? 'MISS' : cacheEntry.isStale ? 'STALE' : 'HIT');\n            }\n            // Draft mode should never be cached\n            if (isDraftMode) {\n                res.setHeader('Cache-Control', 'private, no-cache, no-store, max-age=0, must-revalidate');\n            }\n            const headers = (0,next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__.fromNodeOutgoingHttpHeaders)(cacheEntry.value.headers);\n            if (!((0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode') && isIsr)) {\n                headers.delete(next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.NEXT_CACHE_TAGS_HEADER);\n            }\n            // If cache control is already set on the response we don't\n            // override it to allow users to customize it via next.config\n            if (cacheEntry.cacheControl && !res.getHeader('Cache-Control') && !headers.get('Cache-Control')) {\n                headers.set('Cache-Control', (0,next_dist_server_lib_cache_control__WEBPACK_IMPORTED_MODULE_12__.getCacheControlHeader)(cacheEntry.cacheControl));\n            }\n            await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, new Response(cacheEntry.value.body, {\n                headers,\n                status: cacheEntry.value.status || 200\n            }));\n            return null;\n        };\n        // TODO: activeSpan code path is for when wrapped by\n        // next-server can be removed when this is no longer used\n        if (activeSpan) {\n            await handleResponse(activeSpan);\n        } else {\n            await tracer.withPropagatedContext(req.headers, ()=>tracer.trace(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__.BaseServerSpan.handleRequest, {\n                    spanName: `${method} ${req.url}`,\n                    kind: next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__.SpanKind.SERVER,\n                    attributes: {\n                        'http.method': method,\n                        'http.target': req.url\n                    }\n                }, handleResponse));\n        }\n    } catch (err) {\n        // if we aren't wrapped by base-server handle here\n        if (!activeSpan && !(err instanceof next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__.NoFallbackError)) {\n            await routeModule.onRequestError(req, err, {\n                routerKind: 'App Router',\n                routePath: normalizedSrcPage,\n                routeType: 'route',\n                revalidateReason: (0,next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__.getRevalidateReason)({\n                    isRevalidate,\n                    isOnDemandRevalidate\n                })\n            });\n        }\n        // rethrow so that we can handle serving error page\n        // If this is during static generation, throw the error again.\n        if (isIsr) throw err;\n        // Otherwise, send a 500 response.\n        await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, new Response(null, {\n            status: 500\n        }));\n        return null;\n    }\n}\n\n//# sourceMappingURL=app-route.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/next@15.5.3_react-dom@19.1.1_react@19.1.1__react@19.1.1/node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fagent%2Froute&page=%2Fapi%2Fagent%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fagent%2Froute.ts&appDir=%2FUsers%2Fwillroche%2FDesktop%2FHopHacks2025%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fwillroche%2FDesktop%2FHopHacks2025&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/next@15.5.3_react-dom@19.1.1_react@19.1.1__react@19.1.1/node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!*********************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/next@15.5.3_react-dom@19.1.1_react@19.1.1__react@19.1.1/node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \*********************************************************************************************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/next@15.5.3_react-dom@19.1.1_react@19.1.1__react@19.1.1/node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!*********************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/next@15.5.3_react-dom@19.1.1_react@19.1.1__react@19.1.1/node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \*********************************************************************************************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "../app-render/action-async-storage.external":
/*!*******************************************************************************!*\
  !*** external "next/dist/server/app-render/action-async-storage.external.js" ***!
  \*******************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/action-async-storage.external.js");

/***/ }),

/***/ "../app-render/after-task-async-storage.external":
/*!***********************************************************************************!*\
  !*** external "next/dist/server/app-render/after-task-async-storage.external.js" ***!
  \***********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/after-task-async-storage.external.js");

/***/ }),

/***/ "./work-async-storage.external":
/*!*****************************************************************************!*\
  !*** external "next/dist/server/app-render/work-async-storage.external.js" ***!
  \*****************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-async-storage.external.js");

/***/ }),

/***/ "./work-unit-async-storage.external":
/*!**********************************************************************************!*\
  !*** external "next/dist/server/app-render/work-unit-async-storage.external.js" ***!
  \**********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-unit-async-storage.external.js");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

"use strict";
module.exports = require("https");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "next/dist/shared/lib/no-fallback-error.external":
/*!******************************************************************!*\
  !*** external "next/dist/shared/lib/no-fallback-error.external" ***!
  \******************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/no-fallback-error.external");

/***/ }),

/***/ "next/dist/shared/lib/router/utils/app-paths":
/*!**************************************************************!*\
  !*** external "next/dist/shared/lib/router/utils/app-paths" ***!
  \**************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router/utils/app-paths");

/***/ }),

/***/ "punycode":
/*!***************************!*\
  !*** external "punycode" ***!
  \***************************/
/***/ ((module) => {

"use strict";
module.exports = require("punycode");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("stream");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("url");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("zlib");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next@15.5.3_react-dom@19.1.1_react@19.1.1__react@19.1.1","vendor-chunks/tr46@0.0.3","vendor-chunks/@supabase+auth-js@2.71.1","vendor-chunks/@supabase+realtime-js@2.15.5","vendor-chunks/@supabase+postgrest-js@1.21.4","vendor-chunks/@supabase+node-fetch@2.6.15","vendor-chunks/@supabase+storage-js@2.12.1","vendor-chunks/whatwg-url@5.0.0","vendor-chunks/@supabase+supabase-js@2.57.4","vendor-chunks/@supabase+functions-js@2.4.6","vendor-chunks/webidl-conversions@3.0.1"], () => (__webpack_exec__("(rsc)/./node_modules/.pnpm/next@15.5.3_react-dom@19.1.1_react@19.1.1__react@19.1.1/node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fagent%2Froute&page=%2Fapi%2Fagent%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fagent%2Froute.ts&appDir=%2FUsers%2Fwillroche%2FDesktop%2FHopHacks2025%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fwillroche%2FDesktop%2FHopHacks2025&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!")));
module.exports = __webpack_exports__;

})();